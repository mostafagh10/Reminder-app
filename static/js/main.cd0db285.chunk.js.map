{"version":3,"sources":["App.js","actioncreator/index.js","actiontypes/index.js","serviceWorker.js","reducers/reducer1.js","index.js"],"names":["App","state","text","date","Date","remindermap","props","y","map","key","id","className","moment","fromNow","onClick","REMOVEREMINDER","type","placeholder","onChange","e","setState","target","value","this","ADDREMINDER","CLEARREMINDER","Component","connect","action","console","log","Boolean","window","location","hostname","match","Reducer1","read_cookie","reminders","Math","random","bake_cookie","filter","x","store1","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wQAKMA,E,4MACJC,MAAQ,CACNC,KAAO,GACPC,KAAM,IAAIC,M,EAGZC,YAAc,WAEZ,OADY,EAAKC,MAAVC,EAEHC,KAAI,SAAAD,GACJ,OACE,yBAAKE,IAAKF,EAAEG,GAAIC,UAAU,UACxB,+CAAqBJ,EAAEL,MACvB,+CAAqBU,IAAO,IAAIR,KAAKG,EAAEJ,OAAOU,WAClD,4BAAQF,UAAU,iBAAiBG,QAAS,kBAAM,EAAKR,MAAMS,eAAeR,EAAEG,MAA9E,mBAAoGH,EAAEL,W,uDAMnG,IAAD,OACR,OACE,yBAAKS,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,wBAAIA,UAAU,SAAd,gBAAuC,6BACvC,2BAAOK,KAAK,OAAOC,YAAY,qBAAqBC,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAClB,KAAKiB,EAAEE,OAAOC,SAASA,MAAOC,KAAKtB,MAAMC,OAAO,6BAAM,6BAC1I,2BAAOc,KAAK,iBAAiBE,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACjB,KAAKgB,EAAEE,OAAOC,SAASA,MAAOC,KAAKtB,MAAME,OAAQ,6BAAM,6BACpH,4BAAQQ,UAAU,kBAAkBG,QAAS,WAC3C,EAAKR,MAAMkB,YAAY,EAAKvB,MAAMC,KAAK,EAAKD,MAAME,MAClD,EAAKiB,SAAS,CACZlB,KAAK,GACLC,KAAK,OAJT,gBAOuB,6BAAM,6BAC5BoB,KAAKlB,cAAc,6BAAM,6BAC1B,4BAAQM,UAAU,kBAAkBG,QAAS,kBAAM,EAAKR,MAAMmB,kBAA9D,0B,GArCYC,aA4DHC,mBANf,SAAkB1B,GAChB,MAAM,CACJM,EAAIN,KAIwB,CAACuB,YC/DN,SAACtB,EAAKC,GAC7B,IAAMyB,EAAS,CACXZ,KCJW,MDKXd,KAAKA,EACLC,KAAKA,GAGT,OADA0B,QAAQC,IAAI,SAAWF,GAChBA,GDwDkCb,eCrDf,SAACL,GAC3B,IAAMkB,EAAS,CACXZ,KCbc,SDcdN,GAAGA,GAGP,OADAmB,QAAQC,IAAI,SAAWF,GAChBA,GD+CiDH,cC5C/B,WAIzB,MAHe,CACXT,KCrBa,WF+DNW,CAA6D3B,GGrDxD+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCaSC,EA5BE,WAAwB,IAAvBnC,EAAsB,uDAAhB,GAAK2B,EAAW,uCACpC3B,EAAQoC,sBAAY,WACpB,IAAIC,EAAY,GAChB,MFNe,QEMZV,EAAOZ,MACNsB,EAAS,sBACFrC,GADE,CAEL,CAACC,KAAO0B,EAAO1B,KACfC,KAAOyB,EAAOzB,KACdO,GAAK6B,KAAKC,YAEdC,sBAAY,UAAUH,GACfA,GFbO,WEeVV,EAAOZ,MACXsB,EAAYrC,EAAMyC,QAAO,SAAAC,GAAC,OAAIA,EAAEjC,KAAOkB,EAAOlB,MAC9C+B,sBAAY,UAAUH,GACfA,GFjBM,UEmBTV,EAAOZ,MACXsB,EAAY,GACZG,sBAAY,UAAUH,GACfA,GAGArC,GCjBT2C,G,MAASC,YAAYT,IAE3BU,IAASC,OAEP,kBAAC,IAAD,CAAUC,MAAOJ,GACf,kBAAC,EAAD,OAGDK,SAASC,eAAe,SFiHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.cd0db285.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport {ADDREMINDER,REMOVEREMINDER,CLEARREMINDER} from './actioncreator/index'\nimport moment from 'moment';\n\nclass App extends Component {\n  state = {\n    text : '',\n    date: new Date()\n  }\n\n  remindermap = () => {\n    const {y} = this.props;\n    return(\n      y.map(y => {\n        return(\n          <div key={y.id} className=\"bigkey\">\n            <h3>reminder name : {y.text}</h3>\n            <h3>reminder time : {moment(new Date(y.date)).fromNow()}</h3>\n        <button className=\"btn btn-danger\" onClick={() => this.props.REMOVEREMINDER(y.id)}>DELETE REMINDER {y.text}</button>\n          </div>\n        )\n      })\n    )\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n      <div className=\"bigparent\">\n      <h1 className=\"title\">REMINDER APP</h1><br />\n      <input type=\"text\" placeholder=\"enter the reminder\" onChange={(e) => this.setState({text:e.target.value})} value={this.state.text}/><br /><br />\n      <input type=\"datetime-local\" onChange={(e) => this.setState({date:e.target.value})} value={this.state.date} /><br /><br />\n      <button className=\"brn btn-primary\" onClick={()=> {\n        this.props.ADDREMINDER(this.state.text,this.state.date);\n        this.setState({\n          text:'',\n          date:''\n        })\n      }\n      }>ADD REMINDER</button><br /><br />\n      {this.remindermap()}<br /><br />\n      <button className=\"btn btn-success\" onClick={() => this.props.CLEARREMINDER()}>CLEAR REMINDERS</button>\n    </div>\n    </div>\n    </div>\n  );\n  }\n}\n\n\n/*\nfunction mapdispatch(dispatch){\n  return {\n    addbutton : () => dispatch(ADDREMINDER())\n  }\n}\n*/\n\nfunction mapstate(state){\n  return{\n    y : state\n  }\n}\n\nexport default connect(mapstate,{ADDREMINDER,REMOVEREMINDER,CLEARREMINDER})(App);\n","import {ADD,REMOVE,CLEAR} from '../actiontypes/index'\r\n\r\nexport const ADDREMINDER = (text,date) => {\r\n    const action = {\r\n        type : ADD,\r\n        text:text,\r\n        date:date\r\n    }\r\n    console.log(\"action\" , action);\r\n    return action\r\n}\r\n\r\nexport const REMOVEREMINDER = (id) => {\r\n    const action = {\r\n        type : REMOVE,\r\n        id:id\r\n    }\r\n    console.log(\"action\" , action);\r\n    return action\r\n}\r\n\r\nexport const CLEARREMINDER = () => {\r\n    const action = {\r\n        type : CLEAR\r\n    }\r\n    return action\r\n}","export const ADD = \"ADD\";\r\nexport const REMOVE = \"REMOVE\";\r\nexport const CLEAR = \"CLEAR\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ADD,REMOVE,CLEAR} from '../actiontypes/index'\r\nimport {bake_cookie,read_cookie} from 'sfcookies'\r\n\r\nconst Reducer1 = (state=[] , action) => {\r\n    state = read_cookie(\"xcookie\");\r\n    let reminders = [];\r\n    if(action.type === ADD){\r\n        reminders = [\r\n            ...state,\r\n            {text : action.text,\r\n            date : action.date,\r\n            id : Math.random()}\r\n        ]\r\n        bake_cookie(\"xcookie\",reminders);\r\n        return reminders\r\n    }\r\n    else if(action.type === REMOVE){\r\n        reminders = state.filter(x => x.id !== action.id);\r\n        bake_cookie(\"xcookie\",reminders);\r\n        return reminders;\r\n    }\r\n    else if(action.type === CLEAR){\r\n        reminders = [];\r\n        bake_cookie(\"xcookie\",reminders);\r\n        return reminders;\r\n    }\r\n    else{\r\n        return state;\r\n    }\r\n}\r\n\r\nexport default Reducer1;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux'\nimport Reducer1 from './reducers/reducer1'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nconst store1 = createStore(Reducer1)\n\nReactDOM.render(\n  //<React.StrictMode>\n  <Provider store={store1}>\n    <App />\n    </Provider>\n  //</React.StrictMode>,\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}